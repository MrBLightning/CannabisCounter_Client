import { getRequest, postRequest, putRequest, deleteRequest } from "shared/http";
import { CatalogItem, Department, Group, UnitSize, Branch, SibaRes, Siba, InitialItemsToTransfer, Transfer } from "shared/interfaces/models/SystemModels";

export async function getSibaRes(): Promise<SibaRes[]> {
    return await getRequest<SibaRes[]>('/data/sibares');
}

export async function getSibas(): Promise<Siba[]> {
    return await getRequest<Siba[]>('/data/siba');
}

export async function getCatalogItem(): Promise<CatalogItem[]> {
    return await getRequest<CatalogItem[]>('/data/catalogItem');
}

export async function getDepartments(): Promise<Department[]> {
    return await getRequest<Department[]>('/data/department');
}

export async function getUnitSizes(): Promise<UnitSize[]> {
    return await getRequest<UnitSize[]>('/data/unitsize');
}

export async function getGroups(): Promise<Group[]> {
    return await getRequest<Group[]>('/data/group');
}

export async function getBranches(): Promise<Branch[]> {
    return await getRequest<Branch[]>('/data/branch');
}

export async function getBranchById(BranchId:number): Promise<Branch[]> {
    return await getRequest<Branch[]>('/data/branch/' + BranchId);
}

export async function getInitialItemsToTransfer(BranchId: number): Promise<InitialItemsToTransfer[]> {
    return await getRequest<InitialItemsToTransfer[]>('/data/initialItemTransfer/' + BranchId);
}

export async function getTransfersByBranch(id: number): Promise<Transfer[]> {
    return await getRequest<Transfer[]>('/transfers/' + id);
}

export async function getNextTransferNumber():Promise<number>{
    return await getRequest<number>('/data/counters/nextTransferNumber');
}

export async function addTransfer(
    transferNumber: number, FromBranchId: number, ToBranchId: number, transferReason: number,
    transferAuth: number, transferDetail: string, transferStatus: number, BarCode: number, Amount: number,
    networkId: number, date: Date, createdBy: number
) {
    let record = {
        // transferNumber: transferNumber,
        FromBranchId: FromBranchId,
        ToBranchId: ToBranchId,
        // transferReason: transferReason,
        // transferAuth: transferAuth,
        // transferDetail: transferDetail,
        // transferStatus: transferStatus,
        BarCode: BarCode,
        Amount: Amount, // amountTransfered,
        // networkId: networkId,
        Date: date, // createdDate
        // createdBy: createdBy
        };
    await postRequest('/transfer/transferItem', { record });
}

// export async function deleteOrder(OrderNum: number) {
//     await deleteRequest('/order/orderItem/' + OrderNum);
// }

